[
["index.html", "今日からできる再現可能な論文執筆 1 はじめに 1.1 TWS概要", " 今日からできる再現可能な論文執筆 国里愛彦(専修大学)・竹林由武(福島県立医科大学) 2020/10/31(土) 10:00-12:00 1 はじめに 本サイトは，日本心理学会第84回大会(以下，JPA2020)のチュートリアルワークショップ(以下，TWS)002「今日からできる再現可能な論文執筆」の事前準備と当日の演習用サイトになります。本サイトもRStudioとRMarkdown(Bookdown)を使って作成されています。左の目次をクリックして移動するか，＞をクリックして次のページに移動ください。 1.1 TWS概要 TWSの概要は以下になります。 再現性の危機への対処として，データ処理から論文執筆までの一連のプロセスの再現性を高める取り組みへの注目が高まっている。論文完成までには，（1）データの前処理，（2）統計解析，（3）論文の執筆の3 段階があり，それぞれの段階において異なるソフトウェアを用いることが多い。例えば，Excel でデータの前処理をし，SPSS で統計解析して，結果をWord にコピー＆ペーストして本文を執筆するなどである。それぞれの段階においてアドホックな手続きがとられ，その都度ソフトウェアが切り替えられることで，各段階と移行において再現可能性が低くなる危険性がある。本チュートリアルでは，R （RStudio）とRMarkdown を使ってデータの前処理から投稿可能な論文執筆までを行う方法を解説する。R（RStudio）やRMarkdown 初心者を想定し，執筆環境の整備から実際の執筆までできるようになることを目指す。 "],
["02.html", "2 事前準備（Dockerとは） 2.1 解析環境の違うと結果が再現しない？ 2.2 Dockerでコードだけでなく解析環境の再現性も保つ 2.3 Rocker: RとRstudio用のDocker 2.4 統計解析でDockerを導入する利点", " 2 事前準備（Dockerとは） 2.1 解析環境の違うと結果が再現しない？ コンピュータが計算するものは正しそうに見えますが，Rを含む統計ソフトが返す結果がいつでも一致するとは限りません。例えば，コンピュータのOSの種類，統計解析ソフトのバージョン，Rの場合はパッケージのバージョンによって出力される結果は異なることがあります。最近は，データや解析コードの公開が進んできています。しかし，このような統計解析を実行する環境の違いが，再現性を低めている可能性もあります。 2.2 Dockerでコードだけでなく解析環境の再現性も保つ 解析環境の再現性のために，データやコードを公開・共有するだけでなく，解析環境やバージョン情報も公開する必要があります。ただ，なかなか公開するだけだと，論文作成時と同じ解析環境を作るのは難しかったりします。例えば，古いOSで動作するソフトじゃないと解析が再現できない場合，そのOSやソフトを用意するのは難しいかもしれません（実際，研究でつかわれたプログラムが公開されていたが，現在使われているOSでは動作せず，かといって古いOSを用意することも不可能なことがありました）。 OSとソフト（Rの場合はパッケージも）をまとめて配布できると解析環境の再現性が担保できるかもしれません。WindowsやMacの場合は難しいですが，Linux上で動作するようなソフトの場合は，OSとソフトを含んだものをまとめて（まとめたものをコンテナといいます），配布することもできます。このような，OSに依存せずに，Linuxベースのアプリケーションをコンテナ化する技術をDockerと呼びます。以下の図のように，Dockerを使うとOSとソフトをまとめたコンテナをイメージとして配布可能になります。配布が可能ということは，統計解析環境の共有も可能になります。そして，Docker Hub(https://hub.docker.com/ )では，多数のイメージが公開されています。ご自身の関心に合わせて，便利なDockerイメージをご利用いただけます。 2.3 Rocker: RとRstudio用のDocker 今回の場合は，OS(Ubuntsと呼ばれるLinux)とソフト（RとIDEのRStudio）とRパッケージをまとめたコンテナを使います。自作もできますが，結構大変ですので，既に公開されているものを使います。RやRstudio用のDockerコンテナをつくるRockerプロジェクト(https://hub.docker.com/u/rocker)1が公開したイメージが便利なので，今回のTWSでも使用します。 Rockerプロジェクトでも十分なのですが，よく使うパッケージなどは事前に入れられていると便利です。特にベイズ統計で用いるRstanなどはインストールがちょっと面倒なので，事前にそれらが入っていると便利かと思います（特にMarkdownでのPDF出力まわりやRStanなどが事前に入っていると便利です）。そこで，私は心理学で使いそうなRでパッケージを，RockerプロジェクトのVerseというコンテナにたくさん追加した自作Dockerイメージ(ykunisato/paper-r)を作って公開しています(https://hub.docker.com/u/ykunisato)。今回のTWSでは，私が作成したpaper-rというDockerイメージを使います。 2.4 統計解析でDockerを導入する利点 最後に，Dockerを導入する利点を以下に挙げておきます。 統計解析環境を再現可能にできる（使ったDockerイメージを配布すればいいだけ） 最初にDockerさえインストールできれば，あとはコマンド１つで，簡単に面倒なソフトのインストールなどが終わる プラウザで作業ができるので，今どきの仕事スタイルにあっている かっこいい (マニア向け)もしサーバー上にDockerを導入すれば，簡単に自分のサーバーでサービスを稼働できる（iPadからブラウザを通してRstudioが使える！）。 Nüst, D., Eddelbuettel, D., Bennett, D., Cannoodt, R., Clark, D., Daróczi, G., Edmondson, M., Fay, C., Hughes, E., Kjeldgaard, L., Lopp, S., Marwick, B., Nolis, H., Nolis, J., Ooi, H., Ram, K., Ross, N., Shepherd, L., Sólymos, P., … Xiao, N. (2020). The Rockerverse: Packages and Applications for Containerisation with R. The R Journal, 12(1), 437.↩︎ "],
["03.html", "3 事前準備(Windows編) 3.1 Windows10のエディションを確認する（ProかHomeか） 3.2 Windows10がProエディションの場合の導入方法 3.3 Windows10がHomeエディションの場合の導入方法 3.4 WindowsPCを複数人で共有する場合 3.5 Dockerが使えない場合", " 3 事前準備(Windows編) それでは，早速お手持ちのWindowsパソコンにDockerを導入しましょう（Macは次の「4 事前準備（Mac編）」をご覧ください）。なお， Dockerを使うにあたって，15GBくらいハードディスクに余裕があると良いかと思います。 3.1 Windows10のエディションを確認する（ProかHomeか） 多くの方が，Windows10をお使いだとは思いますが，一般的に使われるWindowsにはProとHomeの２つのエディションがあります。エディションによってDockerの導入方法が異なります。以下の解説動画で，ご自身のパソコンのWindowsがProかHomeのどちらかをご確認ください。 3.2 Windows10がProエディションの場合の導入方法 Windows10 Proエディションの方は以下の動画を参考にDockerを導入なさってください。 コマンドプロンプトに打ち込むDocker用のコードは以下になります(XXXXXの部分はご自身のアカウント名に改変ください)。ローカルで，ご自身が所有しているパソコンでの利用を想定しているのでパスワードはpaperに固定しています（これも気になる場合は改変ください）。 docker run -e PASSWORD=paper -e DISABLE_AUTH=true -p 8787:8787 -v /c/user/XXXXX/Document:/home/rstudio -d --name paper ykunisato/paper-r ちょっとファイル・フォルダの話を書いておくと，DockerのコンテナはWindowsとは独立してパソコン内に存在するので，Windowsとコンテナでファイルやフォルダを共有する場合は，上記の-vで指定する必要があります。そして，上記のように，/c/user/XXXXX/Documentをしていますので，DockerのRStudio上でのファイルは/c/user/XXXXX/Document内にあります。これは，普段使っている/c/ユーザー/XXXX/ドキュメントとは異なるのでご注意ください。 3.3 Windows10がHomeエディションの場合の導入方法 Windows10 Homeエディションの方は以下の動画を参考にDockerを導入なさってください。 コマンドプロンプトに打ち込むDocker用のコードは以下になります(XXXXXの部分はご自身のアカウント名に改変ください)。ローカルで，ご自身が所有しているパソコンでの利用を想定しているのでパスワードはpaperに固定しています（これも気になる場合は改変ください）。 docker run -e PASSWORD=paper -e DISABLE_AUTH=true -p 8787:8787 -v /c/user/XXXXX/Document:/home/rstudio -d --name paper ykunisato/paper-r ちょっとファイル・フォルダの話を書いておくと，DockerのコンテナはWindowsとは独立してパソコン内に存在するので，Windowsとコンテナでファイルやフォルダを共有する場合は，上記の-vで指定する必要があります。そして，上記のように，/c/user/XXXXX/Documentをしていますので，DockerのRStudio上でのファイルは/c/user/XXXXX/Document内にあります。これは，普段使っている/c/ユーザー/XXXX/ドキュメントとは異なるのでご注意ください。 3.4 WindowsPCを複数人で共有する場合 Dockerで走らせているRStudio serverは同一PC内で共有されているようです。なので，Aという人がDockerで動かしているRStudio serverで作業した内容を別のユーザーBも見れます。研究室においているWindows PCなどは，複数ユーザーがログインできるようになっているかもしれないので気をつける必要があります。この場合は以下の２つの対処法があります。 RStudio serverへのログインをユーザーごとにできるようにする。詳しくは，Tips: Rstudioのユーザー追加で紹介していますが，RStudio serverでは複数ユーザーのアカウントを作成できます。これで，そのパソコンにログインしたユーザーは，自分のIDとパスでRStudio serverにログインできます。またDocker作成時にDISABLE_AUTH=trueはとっておいてください。 Dockerを使ってクラウドもしくは自分のサーバーにRStudio serverを設置して使う。研究室の場合，学生はブラウザからそのサーバーにアクセスしてログインして解析や執筆をします（サーバー上にデータを置くので匿名化や同意取得時の説明などが必要ではあります）。詳しくは，Docker-composeを使ってGCE上の複数のサービス(Rstudio, Jupyter notebook, JATOS, elabFTW)をHTTPS化する方法で説明をしています。個人的には，Dockerを使うメリットの１つとして，サーバーの管理が便利というのがあります（元々そのために開発されたものでもあります）。 3.5 Dockerが使えない場合 以下のソフトとパッケージをインストールください。 R(https://www.r-project.org/) Rstudio(https://rstudio.com/) 私が用意したDockerイメージ内には大量のRパッケージがはいっているので，それと同じものを用意するのは難しいかと思います。とりあえず，デモコードを実施した場合にインストールするか聞かれるので，その都度インストールください。 "],
["04.html", "4 事前準備(Mac編) 4.1 MacへのDockerの導入方法 4.2 Dockerが使えない場合", " 4 事前準備(Mac編) それでは，早速お手持ちのMacにDockerを導入しましょう（Windowsは前の3 事前準備(Windows編)をご覧ください）。なお， Dockerを使うにあたって，15GBくらいハードディスクに余裕があると良いかと思います。 4.1 MacへのDockerの導入方法 Macユーザーの方は，以下の動画を参考にDockerを導入ください。 ターミナルには以下のコマンドを入力します（適宜，PASSWORDやnameの=以降は，好みによって変更ください）。 docker run -e PASSWORD=paper -e DISABLE_AUTH=true -p 8787:8787 -v $PWD:/home/rstudio -d --name paper ykunisato/paper-r Windowsとは違いMacの場合は，普段使っているホームディレクトリがマウントされていると思います。普通にMacのファイル情報にアクセスできるので使うのに違和感もないかもしれません。 4.2 Dockerが使えない場合 以下のソフトとパッケージをインストールください。 R(https://www.r-project.org/) Rstudio(https://rstudio.com/) 私が用意したDockerイメージ内には大量のRパッケージがはいっているので，それと同じものを用意するのは難しいかと思います。とりあえず，デモコードを実施した場合にインストールするか聞かれるので，その都度インストールください。 "],
["05.html", "5 事前準備(その他) 5.1 文献管理ソフト 5.2 Githubアカウント", " 5 事前準備(その他) 5.1 文献管理ソフト BibTeX形式で文献情報が出力できればなんでも良いのですが，最近は，以下の２つが便利かと思います。Zoteroの場合は，RStudioとの連携も良いのです（zotero connection）。ただzotero connectionは，dockerではちょっと使いにくいのと，ユーザーが設定にかける手間が多いとトラブルの元になるので，今回は文献管理ソフトから出力されたbibtex形式ファイルを使うことにします。 Paperpile Zotero 5.2 Githubアカウント Rstudioを使った再現可能性を高める取り組みにおいては，Githubを使うと便利です。詳しくは，RStudioでのGithub入門をご確認ください。 "],
["06.html", "6 上級者向け：renvでRパッケージのバージョン管理もしちゃおう！ 6.1 renvをdockerで利用する準備", " 6 上級者向け：renvでRパッケージのバージョン管理もしちゃおう！ Dockerは環境の再現性においては有用ですが，Rパッケージのバージョン管理を細かく実施できるものではないです。そのため，プロジェクトによってパッケージのバージョンを変えないといけないような状況においては（一部古いパッケージを使う必要があるプロジェクトとか），Rのバージョン管理ソフトのrenvを使います。詳しくは，terashim.comさんのrenv と Docker の相互運用パターンを参照ください。renv自体の使い方は，okiyuki99さんのRのパッケージ管理のためのrenvの使い方を参照ください。以下ではその概要のみを記載します（また，上級者用なので，Macユーザーの利用に限定して解説します）。 6.1 renvをdockerで利用する準備 terashim.comさんのrenv と Docker の相互運用パターンの「外付けパッケージキャッシュパターン 」を採用します。 まずは，パッケージキャッシュを置くフォルダをホスト側に用意します。 mkdir renv そして，以下を実行します。RENV_PATHS_CACHEと上記でつくったrenvフォルダをマウントするコードが追加されています。 docker run -e PASSWORD=paper -e DISABLE_AUTH=true -e RENV_PATHS_CACHE=/home/rstudio/.local/share/renv/cache -p 8787:8787 -v $PWD:/home/rstudio -v $PWD/renv:/home/rstudio/.local/share/renv/cache -d --name paper ykunisato/paper-r Dockerが立ち上がったら，プロジェクトファイルを使って解析を進めます。個人的な意見ですが，かなり解析が進んで使うべきパッケージが固定してくるくらいまで進めます（というのは，以下のrenv::init()を実行すると，プライベートライブラリ内が現在使っているパッケージだけになります。そうするとせっかくDockerでたくさんパッケージをいれているのが無駄になります。なので，ある程度解析が進んでからという感じです）。そこで，以下を実行します。現在使っているパッケージにしぼって，さらにそのバージョン情報とファイルを保存してくれます。 renv::init() この説明資料を作っている際のプロジェクトで実行した結果は以下になります。使っているパッケージのバージョンなどが記録されています。 &gt; renv::init() * Initializing project ... * Discovering package dependencies ... Done! * Copying packages into the cache ... [19/19] Done! The following package(s) will be updated in the lockfile: # GitHub ============================= - renv [* -&gt; rstudio/renv@HEAD] # RSPM =============================== - base64enc [* -&gt; 0.1-3] - bookdown [* -&gt; 0.21] なお，作業をしていて，パッケージが追加されたりしたら，以下を実行して，追加します。 renv::snapshot() なお，新しいパッケージを追加せずに実行すると，以下のようになります。ちなみに，パッケージのバージョンなどのは，renv.lockファイルに記録されます。 &gt; renv::snapshot() * The lockfile is already up to date. 上記のようにenv.lockファイルや関連するフォルダにパッケージの情報が記録されていれば，別の解析環境において，以下を実行することで，上記と全く同じバージョンのRパッケージを用意することができます。 renv::restore() "],
["07.html", "7 Rmarkdownで英語論文を書いてみよう！", " 7 Rmarkdownで英語論文を書いてみよう！ TWS当日(2020/10/31(土) 10:00-12:00)に解説します。 "],
["08.html", "8 日本語論文を書こう！", " 8 日本語論文を書こう！ TWS当日(2020/10/31(土) 10:00-12:00)に解説します。 "],
["09.html", "9 ウェブサイトやスライドを作ろう!", " 9 ウェブサイトやスライドを作ろう! TWS当日(2020/10/31(土) 10:00-12:00)に解説します。 "]
]
